@using NewBlackJack.Enums;
@using NewBlackJack.Models;

@using MudBlazor

@if (OnInitializedCompleted)
{
    <div class="modal-container">
        <div class="modal-style">

            <h2 class="titulo-modal">Configurações</h2>

            <div class="inputs-modal">
                <MudStack Row="true" >
                    <MudTextField T="string" @bind-Value="_usuarioEdit.Nome" Label="Nome" HelperText="@TextoErroNome" Error="@ErroNome"
                                  HelperTextOnFocus="true" Variant="Variant.Filled" MaxLength="20" />

                    <MudSelect @bind-Value="_usuarioEdit.BaralhoAtivo" T="BaralhoEnums.ETipoSkinBaralho" Label="Tipo Baralho" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter">
                        @foreach (var item in ListaBaralhoAdquirido)
                        {
                            <MudSelectItem T="BaralhoEnums.ETipoSkinBaralho" Value="@item">
                                @GenericClassEnum.ObterEnumDescription(item)
                            </MudSelectItem>
                        }
                    </MudSelect>

                </MudStack>

            </div>
            <div class="d-flex">
                <button @onclick="@Cancelar" class="btn-menu">
                    Cancelar
                </button>

                <button @onclick="@Salvar" class="btn-menu">
                    Salvar
                </button>
            </div>
        </div>
    </div>
}

@code {
    #region Declaration
    [Parameter] public bool Visibility { get; set; }
    [Parameter] public EventCallback<bool> VisibilityChanged { get; set; }
    private bool _visibility
    {
        get => Visibility;
        set
        {
            Visibility = value;
            VisibilityChanged.InvokeAsync(value);
        }
    }
    [Parameter] public Usuario UsuarioObj { get; set; }
    [Parameter] public EventCallback<Usuario> SalvarUsuario { get; set; }
    [Parameter] public List<BaralhoEnums.ETipoSkinBaralho> ListaBaralhoAdquirido { get; set; }

    private Usuario _usuarioEdit { get; set; }

    private string TextoErroNome { get; set; }
    private bool ErroNome { get; set; }
    private bool OnInitializedCompleted { get; set; }

    #endregion

    #region Functions

    protected override void OnInitialized()
    {
        _usuarioEdit = UsuarioObj.Clone();

        OnInitializedCompleted = true;
        base.OnInitialized();
    }

    private async Task Salvar()
    {
        await SalvarUsuario.InvokeAsync(_usuarioEdit);
        _visibility = false;
    }

    private void Cancelar()
    {
        _visibility = false;
    }


    #endregion
}

<style>

    .mud-popover .mud-list {
        background-color: #005f00;
    }
</style>